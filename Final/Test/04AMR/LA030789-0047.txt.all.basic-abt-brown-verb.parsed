# ::id 1
# ::snt Carl Lewis said Carl Lewis  knew Ben Johnson was taking performance-enhancing drugs just after their 100-meter final last fall at the Seoul Olympics
(x3 / say-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x6 / know-01
		:ARG0 (x4 / newspaper
			:name (n1 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x10 / take-01
			:ARG0 (x7 / newspaper
				:name (n2 / name
					:op1 "Ben"
					:op2 "Johnson"))
			:ARG1 (x12 / drug
				:mod (x11 / performance-enhancing))
			:time (x14 / after
				:mod (x13 / just)
				:op1 (x19 / fall
					:ARG4 (x16 / 100-meter)
					:mod (x17 / final)
					:mod (x18 / last)
					:null_edge (x23 / game
						:name (n3 / name
							:op1 "Olympics")
						:part (x22 / city
							:name (n4 / name
								:op1 "Seoul"))))))))

# ::id 2
# ::snt Ben Johnson  got out of those blocks like a caged lion , Lewis said in an interview Sunday at the Los Angeles Marathon , where Ben Johnson  was representing a sponsor
(x14 / say-01
	:ARG0 (x11 / lion
		:ARG0 (x1 / newspaper
			:name (n2 / name
				:op1 "Ben"
				:op2 "Johnson"))
		:ARG1-of (x7 / block)
		:mod (x10 / caged))
	:ARG0 (x13 / person
		:name (n / name
			:op1 "Lewis"))
	:time (x17 / interview-01)
	:location (x23 / country
		:name (n1 / name
			:op1 "Marathon")
		:null_edge (x21 / country
			:name (n3 / name
				:op1 "Los"))
		:null_edge (x22 / country
			:name (n4 / name
				:op1 "Angeles"))
		:ARG0-of (x29 / person
			:ARG0-of (r / represent-01)
			:ARG0 (x27 / person
				:name (n5 / name
					:op1 "Johnson")
				:null_edge (x26 / person
					:name (n6 / name
						:op1 "Ben")))
			:ARG1 (x31 / sponsor-01)))
	:time (xap0 / date-entity
		:weekday (x18 / sunday)))

# ::id 3
# ::snt How can anybody in the world do that after running all those rounds (preliminary heats )?
(x2 / possible
	:domain (x7 / do-02
		:ARG0 (x3 / anybody
			:location (x6 / world)
			:time (x9 / after
				:op1 (x10 / run-01
					:ARG1 (x13 / round
						:quant (x11 / all)
						:mod (x16 / heat
							:mod (x15 / preliminary))))))))

# ::id 4
# ::snt Ben Johnson  said , Look , Ben Johnson  do not know what Carl Lewis  is taking or what Carl Lewis  is doing , but Carl Lewis  is doing something
(x3 / say-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Ben"
			:op2 "Johnson"))
	:ARG1 (x11 / know-01
		:null_edge (x5 / look-02)
		:ARG0 (x7 / newspaper
			:name (n1 / name
				:op1 "Ben"
				:op2 "Johnson"))
		:ARG1 (x17 / or
			:op1 (x16 / take-01
				:ARG0 (x13 / newspaper
					:name (n2 / name
						:op1 "Carl"
						:op2 "Lewis")))
			:op2 (x28 / do-02
				:ARG0 (x19 / newspaper
					:name (n3 / name
						:op1 "Carl"
						:op2 "Lewis"))
				:ARG0 (x25 / newspaper
					:name (n4 / name
						:op1 "Carl"
						:op2 "Lewis"))
				:ARG1 (x29 / something)))))

# ::id 5
# ::snt Now Lewis has been implicated in an alleged sabotage of Johnson's drug test , which returned a positive result for the banned anabolic steroid stanozolol
(x5 / implicate-01
	:time (x1 / now)
	:ARG1 (x2 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG2 (x9 / sabotage
		:ARG1-of (x8 / allege-01)
		:ARG0-of (x17 / return-01
			:ARG1 (x13 / drug)
			:ARG1 (x20 / result-01
				:mod (x19 / positive))
			:ARG4 (x25 / steroid
				:ARG1-of (x23 / ban-01)
				:mod (x24 / anabolic)
				:mod (x26 / stanozolol)))))

# ::id 6
# ::snt At a Canadian inquiry into drug use in sport Monday at Toronto , Charlie Francis , a Canadian sprint coach , testified that Johnson might have drunk contaminated beer before a urinalysis
(x22 / testify-01
	:ARG2 (x4 / inquire-01
		:mod (x3 / country
			:name (n2 / name
				:op1 "Canada"))
		:ARG1 (x7 / use-01
			:ARG1 (x6 / drug))
		:ARG1 (x9 / sport))
	:time (x10 / monday)
	:location (x12 / city
		:name (n / name
			:op1 "Toronto"))
	:ARG0 (x15 / person
		:name (n1 / name
			:op1 "Francis")
		:null_edge (x14 / person
			:name (n3 / name
				:op1 "Charlie"))
		:null_edge (x20 / person
			:ARG0-of (c / coach-01)
			:ARG1 (x18 / country
				:name (n5 / name
					:op1 "Canada"))
			:ARG1 (x19 / sprint)))
	:ARG1 (x26 / have-03
		:ARG0 (x24 / person
			:name (n4 / name
				:op1 "Johnson"))
		:ARG1 (x29 / beer
			:ARG1-of (x27 / drunk)
			:ARG1-of (x28 / contaminate))
		:time (x30 / before
			:op1 (x32 / urinalysis))))

# ::id 7
# ::snt Francis based Charlie Francis  theory on the fact that Johnson took the steroid furazabol three weeks before the Games , not the difficult-to-detect stanozolol
(x2 / base-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Francis"))
	:ARG1 (x5 / theory
		:mod (x3 / person
			:name (n1 / name
				:op1 "Charlie"))
		:mod (x4 / person
			:name (n2 / name
				:op1 "Francis")))
	:ARG2 (x8 / fact
		:name (x10 / name
			:op1 "Johnson"
			:op2 "took"
			:op3 "the"
			:op4 "steroid"
			:op5 "furazabol"
			:op6 "three"
			:op7 "weeks"
			:ARG0-of (x24 / stanozolol))
		:time (x17 / before
			:op1 (x19 / publication
				:name (n3 / name
					:op1 "Games")))))

# ::id 8
# ::snt According to Francistestimony , Johnson said that an unidentified man who had been talking with Lewis sat near the beer that was provided for the athletes to facilitate the athletes  in providing urine samples
(x6 / say-01
	:ARG0 (x3 / person
		:name (n / name
			:op1 "Francistestimony"))
	:ARG0 (x5 / person
		:name (n1 / name
			:op1 "Johnson"))
	:ARG1 (x17 / sit-01
		:ARG0 (x10 / man
			:ARG1-of (x9 / identify-01
				:polarity -)
			:ARG0-of (x14 / talk-01
				:ARG2 (x16 / person
					:name (n2 / name
						:op1 "Lewis"))))
		:ARG2 (x18 / near
			:op1 (x20 / beer
				:purpose (x28 / facilitate-01
					:ARG2 (x26 / athlete)
					:ARG1 (x30 / athletes)
					:ARG1 (x34 / sample-01
						:ARG1 (x33 / urine)))))))

# ::id 9
# ::snt Francis said that two witnesses told Charlie Francis  that the stranger had spoken with Lewis in another area of the waiting room
(x2 / say-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Francis"))
	:ARG1 (x6 / tell-01
		:ARG0 (x5 / person
			:ARG0-of (w / witness-01)
			:quant 2)
		:ARG2 (x8 / person
			:name (n1 / name
				:op1 "Francis")
			:null_edge (x7 / person
				:name (n2 / name
					:op1 "Charlie")))
		:ARG1 (x13 / speak-01
			:ARG0 (x11 / stranger)
			:ARG0 (x15 / person
				:name (n3 / name
					:op1 "Lewis"))
			:ARG1 (x22 / room
				:mod (x17 / another)
				:ARG0-of (x21 / wait-01)))))

# ::id 10
# ::snt Lewis had finished second to Johnson , who set a world record of 9.79 seconds in winning the 100-meter gold medal , and subsequently also had to be tested
(x23 / and
	:op1 (x3 / finish-01
		:ARG0 (x1 / person
			:name (n / name
				:op1 "Lewis"))
		:ARG4 (x6 / person
			:name (n1 / name
				:op1 "Johnson")
			:ARG1-of (x9 / set-02
				:ARG1 (x12 / record
					:mod (x11 / world)
					:ARG1-of (xap0 / resemble-01
						:ARG2 (x15 / temporal-quantity
							:unit (s / second)
							:quant (x14 / more-than))))
				:ARG2 (x17 / win-01
					:ARG1 (x21 / medal
						:mod (x19 / 100-meter)
						:mod (x20 / gold))))))
	:op2 (x29 / test-01
		:ARG1 x6
		:time (x24 / subsequent)
		:mod (x25 / also)))

# ::id 11
# ::snt Any allocation or innuendo that Carl Lewis tampered with Ben Johnson's drink or sample is ludicrous , said David Greifinger , Lewisattorney
(x19 / say-01
	:ARG1 (x17 / ludicrous
		:domain (x3 / or
			:op1 (x2 / allocate-01
				:mod (x1 / any)
				:ARG0-of (x8 / tamper
					:ARG0 (x6 / newspaper
						:name (n1 / name
							:op1 "Carl"
							:op2 "Lewis"))
					:ARG2 (x14 / or
						:op1 (x13 / drink
							:name (x10 / name
								:op1 "Ben"
								:op2 "Johnson"))
						:op2 (x15 / sample-01))))
			:op2 (x4 / innuendo)))
	:ARG0 (x20 / person
		:name (n / name
			:op1 "David"
			:op2 "Greifinger"
			:op3 ","
			:op4 "Lewisattorney")))

# ::id 12
# ::snt These sound like the last acts of desperate men who know desperate men  have committed wrong and see no other way out other than to continue to lie and to fabricate stories
(x2 / sound
	:ARG2 (x6 / act-02
		:mod (x5 / last)
		:ARG1 (x9 / man
			:mod (x8 / desperate)
			:ARG0-of (x11 / know-01
				:ARG1 (x18 / see-01
					:ARG0 (x13 / man
						:mod (x12 / desperate))
					:ARG1 (x15 / commit-01
						:ARG1 x13
						:manner (x16 / wrong))
					:polarity -
					:ARG1 (x21 / way
						:mod (x20 / other))
					:location (x22 / out)
					:null_edge (x26 / continue-01
						:ARG0 x13
						:ARG1 (x29 / and
							:op1 (x28 / lie-01)
							:op2 (x31 / fabricate-01
								:ARG1 (x32 / story)))))))))

# ::id 13
# ::snt Charlie and Ben should own up to the fact that what Charlie and Ben  did was wrong , and should promise to never to do the fact  again and move on with Charlie and Ben  lives
(x / xconcept
	:x (x4 / recommend-01
		:ARG1 (x5 / own-01
			:ARG0 (x2 / and
				:op1 (x1 / person
					:name (n / name
						:op1 "Charlie"))
				:op2 (x3 / person
					:name (n1 / name
						:op1 "Ben")))
			:null_edge (x17 / wrong-41
				:ARG2 (x13 / and
					:op1 (x12 / person
						:name (n2 / name
							:op1 "Charlie"))
					:op2 (x14 / person
						:name (n3 / name
							:op1 "Ben")))))
		:ARG1 (x19 / and))
	:x (x20 / recommend-01
		:ARG1 (x21 / promise-01
			:ARG1 (x29 / and
				:op1 (x27 / fact)
				:mod (x28 / again)
				:op2 (x30 / move-01
					:ARG2 (x36 / life
						:example (x34 / and
							:op1 (x33 / person
								:name (n4 / name
									:op1 "Charlie"))
							:op2 (x35 / person
								:name (n5 / name
									:op1 "Ben")))))))))

# ::id 14
# ::snt By continuing Charlie and Ben  present course of action Charlie and Ben  are just embarrassing Charlie and Ben  further
(x2 / continue-01
	:ARG1 (x7 / course
		:ARG1 (x4 / and
			:op1 (x3 / person
				:name (n / name
					:op1 "Charlie"))
			:op2 (x5 / person
				:name (n1 / name
					:op1 "Ben")))
		:time (x6 / present)
		:ARG1 (x17 / and
			:op1 (x15 / embarrassing
				:domain (x11 / and
					:op1 (x10 / person
						:name (n4 / name
							:op1 "Charlie"))
					:op2 (x12 / person
						:name (n5 / name
							:op1 "Ben")))
				:mod (x14 / just)
				:degree (x19 / further))
			:op1 (x16 / person
				:name (n2 / name
					:op1 "Charlie"))
			:op2 (x18 / person
				:name (n3 / name
					:op1 "Ben")))))

# ::id 15
# ::snt Lewis could not be reached for comment Monday
(x2 / possible
	:domain (x5 / reach-01
		:ARG1 (x1 / person
			:name (n / name
				:op1 "Lewis"))
		:purpose (x7 / comment-01
			:ARG0 x1)
		:ARG1 (x8 / monday)))

# ::id 16
# ::snt Though Johnson's gold medal and Seoul world-record time were both revoked , Ben Johnson  world mark of 9.83 seconds stands
(x21 / stand-06
	:time (x12 / revoke
		:ARG1 (x6 / and
			:op1 (x5 / medal
				:poss (x2 / person
					:name (n1 / name
						:op1 "Johnson"))
				:mod (x4 / gold)
				:location (x7 / city
					:name (n2 / name
						:op1 "Seoul"))))
		:ARG1 (x17 / mark-01
			:ARG0 (x14 / person
				:name (n / name
					:op1 "Ben"))
			:mod (x16 / world)
			:ARG1-of (xap0 / resemble-01
				:ARG2 (x20 / temporal-quantity
					:unit (s / second)
					:quant (x19 / more-than)))))
	:ARG1 x17)

# ::id 17
# ::snt Ben Johnson  set the record at the 1987 World Championships at Rome , where Lewis finished second in 9.93 seconds
(x3 / set-03
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Ben"
			:op2 "Johnson"))
	:ARG1 (x5 / record)
	:time (x10 / organization
		:name (n1 / name
			:op1 "Championships")
		:time (x8 / date-entity
			:year 1987)
		:null_edge (x9 / person
			:location (w / world))
		:location (x12 / city
			:name (n2 / name
				:op1 "Rome")
			:location-of (x16 / finish-01
				:ARG0 (x15 / person
					:name (n3 / name
						:op1 "Lewis"))
				:ARG1-of (xap0 / resemble-01
					:ARG2 (x20 / temporal-quantity
						:unit (s / second)
						:quant (x19 / more-than)))))))

# ::id 18
# ::snt Lewis said Sunday that officials of the International Amateur Athletics Federation should disallow Johnson's world record from Rome because Francis has testified Charlie Francis  sprinter took drugs before the World Championships
(x2 / say-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 (x12 / recommend-01
		:ARG1 (x13 / disallow-01
			:ARG1 (x17 / record
				:poss (x14 / person
					:name (n1 / name
						:op1 "Johnson"))
				:mod (x16 / world)
				:location (x19 / city
					:name (n2 / name
						:op1 "Rome")))
			:ARG1-of (x20 / cause-01
				:ARG0 (x23 / testify-01
					:ARG0 (x21 / person
						:name (n3 / name
							:op1 "Francis"))
					:ARG1 (x27 / take-19
						:ARG0 (x24 / person
							:name (n5 / name
								:op1 "Charlie")
							:ARG0-of (x26 / sprinter))
						:ARG0 (x25 / person
							:name (n6 / name
								:op1 "Francis"))
						:ARG1 (x28 / drug)
						:time (x29 / before
							:op1 (x32 / publication
								:name (n7 / name
									:op1 "Championships")
								:null_edge (x31 / country
									:name (n8 / name
										:op1 "World")))))))
			:ARG0 (xap1 / person
				:ARG0-of (x5 / have-org-role-91
					:ARG2 (o / official)
					:ARG1 (x8 / organization
						:name (n4 / name
							:op1 "International"
							:op2 "Amateur"
							:op3 "Athletics"
							:op4 "Federation"))))))
	:time (xap0 / date-entity
		:weekday (x3 / sunday)))

# ::id 19
# ::snt If that were to happen , Lewis would replace Johnson as the world record-holder
(x9 / replace-01
	:ARG1 (x5 / happen-01
		:ARG1 (x10 / person
			:name (n1 / name
				:op1 "Johnson")))
	:ARG0 (x7 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 x10
	:ARG2 (x14 / record-holder
		:mod (x13 / world)))

# ::id 20
# ::snt IAAF officials , however , said the record will stand because Johnson passed a drug test after the 1987 race
(x6 / say-01
	:ARG1 (x10 / stand-01
		:ARG1 (x8 / record)
		:ARG1-of (x11 / cause-01
			:ARG0 (x13 / pass-01
				:ARG0 (x12 / person
					:name (n1 / name
						:op1 "Johnson"))
				:ARG1 (x16 / test-01
					:ARG1 (x15 / drug))
				:time (x17 / after
					:op1 (x20 / race-02
						:time (x19 / date-entity
							:year 1987))))))
	:ARG0 (xap0 / person
		:ARG0-of (x2 / have-org-role-91
			:ARG2 (o / official)
			:ARG1 (x1 / have-org-role-91
				:ARG1 (o1 / organization
					:name (n / name
						:op1 "IAAF"))))))

# ::id 21
# ::snt If a world record of 9.79 seconds  has been proven that Ben Johnson  took drugs , Carl Lewis  would think that (withdrawing the record )is the responsible thing for the sport , Lewis said Sunday
(x36 / say-01
	:ARG1 (x20 / think-01
		:condition (x10 / prove-01
			:ARG1 (x4 / record
				:mod (x3 / world)
				:ARG1-of (xap0 / resemble-01
					:ARG2 (x7 / temporal-quantity
						:unit (s / second)
						:quant (x6 / more-than))))
			:ARG1 (x14 / take-19
				:ARG0 (x12 / newspaper
					:name (n2 / name
						:op1 "Ben"
						:op2 "Johnson"))
				:ARG1 (x15 / drug)))
		:ARG0 (x17 / newspaper
			:name (n1 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x29 / responsible-41
			:ARG2 (x23 / withdraw-01
				:ARG1 (x25 / record))
			:ARG2 (x33 / sport)))
	:ARG0 (x35 / person
		:name (n / name
			:op1 "Lewis"))
	:time (xap1 / date-entity
		:weekday (x37 / sunday)))

# ::id 22
# ::snt Lewis also contended that Francistestimony painted a false picture as to why Johnson would take performance-enhancing drugs
(x3 / contend-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:mod (x2 / also)
	:ARG1 (x6 / paint-03
		:ARG0 (x5 / person
			:name (n1 / name
				:op1 "Francistestimony"))
		:ARG1 (x9 / picture
			:mod (x8 / false)
			:ARG1 (x15 / take-01
				:ARG0 x5
				:ARG0 (x13 / person
					:name (n2 / name
						:op1 "Johnson"))
				:ARG1 (x17 / drug
					:mod (x16 / performance-enhancing))))))

# ::id 23
# ::snt According to testimony , since 1981 Johnson has taken such drugs as furazabol , stanozolol and the human growth hormone , which is taken from the pituitary glands of human cadavers or can be taken in synthetic form
(x3 / testify-01
	:time (x5 / since
		:op1 (x6 / date-entity
			:year 1981))
	:ARG0 (x7 / person
		:name (n / name
			:op1 "Johnson"))
	:ARG1 (x11 / drug
		:mod (x10 / such)
		:example (x20 / hormone
			:beneficiary (x16 / and
				:op1 (x15 / stanozolol))
			:mod (x18 / human)
			:mod (x19 / grow-01)
			:quant (x32 / or
				:op1 (x24 / take-01
					:destination (x28 / gland
						:mod (x27 / pituitary)
						:mod (x31 / cadaver
							:mod (x30 / human))))
				:op2 (x33 / possible
					:domain (x35 / take-01
						:manner (x38 / form
							:mod (x37 / synthetic))))))))

# ::id 24
# ::snt The drugs induce the growth of muscle tissue , and some athletes claim , help performances
(x10 / and
	:op1 (x3 / induce-02
		:ARG0 (x2 / drug)
		:ARG1 (x5 / grow-01
			:ARG1 x2
			:ARG1 (x8 / tissue
				:mod (x7 / muscle))))
	:op2 (x13 / claim-01
		:ARG0 x2
		:ARG0 (x12 / athletes
			:quant (x11 / some))
		:ARG1 (x16 / perform-01
			:ARG0-of (x15 / help-01))))

# ::id 25
# ::snt Ben Johnson  is trying to say that everyone was on the growth of muscle tissue  , so some athletes  got on the growth of muscle tissue  , Lewis said
(x29 / say-01
	:ARG1 (x4 / try-01
		:ARG0 (x1 / newspaper
			:name (n1 / name
				:op1 "Ben"
				:op2 "Johnson"))
		:ARG1 (x6 / say-01
			:ARG0 x1
			:ARG1 (x8 / everyone)
			:ARG1 (x12 / grow-01
				:ARG1 (x15 / tissue
					:mod (x14 / muscle))))
		:ARG1 (x23 / grow-01
			:ARG1 (x19 / athletes
				:quant (x18 / some))
			:ARG1 (x26 / tissue
				:mod (x25 / muscle))))
	:ARG0 (x28 / person
		:name (n / name
			:op1 "Lewis")))

# ::id 26
# ::snt That is not true
(x4 / true
	:domain (x1 / that))

# ::id 27
# ::snt some athletes  wanted to beat people
(x3 / want-01
	:ARG0 (x2 / athletes
		:quant (x1 / some))
	:ARG1 (x5 / beat-04))

# ::id 28
# ::snt That is why some athletes  got on drugs
(x1 / that
	:time (x6 / get-01
		:ARG0 (x5 / athletes
			:quant (x4 / some))
		:ARG2 (x8 / drug)))

# ::id 29
# ::snt Lewis said track and field is not infested with steroid users as some are beginning to believe in light of the Canadian inquiry
(x2 / say-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 (x4 / and
		:op1 (x3 / track)
		:op2 (x5 / field)
		:op1 (x8 / infest-01
			:prep-with (x11 / person
				:ARG0-of (u / use-01)
				:mod (x10 / steroid))
			:null_edge (x15 / begin-01
				:ARG0 (x13 / some)
				:ARG1 (x17 / believe-01
					:ARG0 x13
					:ARG1 (x23 / inquire-01
						:mod (x22 / country
							:name (n1 / name
								:op1 "Canada"))))))))

# ::id 30
# ::snt Carl Lewis  said about 90 % of the athletes are drug-free
(x3 / say-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x11 / drug
		:ARG2 (x9 / athlete)))

# ::id 31
# ::snt Most of your great athletes are clean , Lewis said
(x10 / say-01
	:ARG1 (x7 / clean-01
		:ARG0 (x5 / athlete
			:quant (x1 / most)
			:ARG1-of (x2 / include-91)
			:mod (x4 / great)))
	:ARG0 (x9 / person
		:name (n / name
			:op1 "Lewis")))

# ::id 32
# ::snt There are athletes who do have a problem
(x6 / have-03
	:ARG0 (x3 / athletes)
	:ARG1 (x8 / problem))

# ::id 33
# ::snt Carl Lewis  can tell who is on a problem
(x3 / possible
	:domain (x4 / tell-01
		:ARG0 (x1 / newspaper
			:name (n / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x9 / problem)))

# ::id 34
# ::snt Carl Lewis  have been around a problem  too long
(x7 / problem
	:poss (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:mod (x8 / too))

# ::id 35
# ::snt Lewis , however , refused to implicate any of Carl Lewis  colleagues
(x5 / refuse-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 (x7 / implicate-01
		:ARG0 x1
		:ARG1 (x12 / colleague
			:mod (x8 / any)
			:null_edge (x10 / person
				:name (n1 / name
					:op1 "Carl"))
			:ARG1 (x11 / person
				:name (n2 / name
					:op1 "Lewis")))))

# ::id 36
# ::snt But Lewis defended Evelyn Ashford , a world-class sprinter who was implicated as a steroid user in Francistestimony last week
(x1 / contrast-01
	:ARG2 (x3 / defend-01
		:ARG0 (x2 / person
			:name (n / name
				:op1 "Lewis"))
		:ARG1 (x4 / name
			:op1 "Evelyn"
			:op2 "Ashford"
			:ARG0-of (x9 / sprinter
				:mod (x8 / world-class)
				:ARG1-of (x12 / implicate-01
					:ARG2 (x16 / person
						:ARG0-of (u / use-01)
						:mod (x15 / steroid))
					:ARG2 (x18 / country
						:name (n1 / name
							:op1 "Francistestimony"))
					:time (x20 / week
						:mod (x19 / last)))))))

# ::id 37
# ::snt Lewis and Ashford are teammates on the Santa Monica Track Club
(x2 / and
	:op1 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:op2 (x3 / person
		:name (n1 / name
			:op1 "Ashford"))
	:op2 (x5 / teammate
		:location (x8 / government-organization
			:name (n2 / name
				:op1 "Santa"
				:op2 "Monica"
				:op3 "Track"
				:op4 "Club"))))

# ::id 38
# ::snt No way in the world does Evelyn Ashford  take drugs , Lewis said , pounding a table
(x13 / say-01
	:ARG1 (x2 / way
		:location (x5 / world))
	:ARG0 (x7 / newspaper
		:name (n / name
			:op1 "Evelyn"
			:op2 "Ashford"))
	:ARG1 (x10 / drug)
	:ARG0 (x12 / person
		:name (n1 / name
			:op1 "Lewis"))
	:ARG1 (x15 / mass-quantity
		:unit (p / pound)
		:ARG0 x7
		:ARG1 (x17 / table)))

# ::id 39
# ::snt Evelyn Ashford  is a victim
(x5 / victim
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Evelyn"
			:op2 "Ashford")))

# ::id 40
# ::snt That is going to happen
(x5 / happen-01
	:ARG1 (x1 / that))

# ::id 41
# ::snt Carl Lewis  do not think that will hurt Evelyn Ashford  image because Evelyn is clean and Evelyn Ashford  always stood for being clean
(x5 / think-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x8 / hurt-01
		:ARG1 (x11 / image
			:poss (x9 / person
				:name (n1 / name
					:op1 "Evelyn"))
			:mod (x10 / person
				:name (n2 / name
					:op1 "Ashford")))
		:ARG1-of (x12 / cause-01
			:ARG0 (x15 / clean-02
				:ARG0 (x13 / person
					:name (n3 / name
						:op1 "Evelyn")
					:ARG0-of (x20 / stand-01
						:ARG0 x13
						:ARG1 (x17 / newspaper
							:name (n4 / name
								:op1 "Evelyn"
								:op2 "Ashford"))
						:time (x19 / always)
						:purpose (x23 / clean-02)))))))

# ::id 42
# ::snt People who know Evelyn Ashford  know No way in the world
(x6 / know-01
	:ARG0 (x3 / know-01
		:ARG1 (x4 / name
			:op1 "Evelyn"
			:op2 "Ashford"))
	:ARG1 (x8 / way)
	:location (x11 / world))

# ::id 43
# ::snt In finishing second at the Olympics , Lewis set a U.S. record of 9.92 seconds
(x9 / set-03
	:ARG2 (x2 / finish-01
		:ARG2 (x6 / game
			:name (n1 / name
				:op1 "Olympics"))
		:ARG0 (x8 / person
			:name (n / name
				:op1 "Lewis")))
	:ARG0 x8
	:ARG1 (x12 / record
		:mod (x11 / country
			:name (n2 / name
				:op1 "U.S."))
		:ARG1-of (xap0 / resemble-01
			:ARG2 (x15 / temporal-quantity
				:unit (s / second)
				:quant (x14 / monetary-quantity
					:unit (y / yuan))))))

# ::id 44
# ::snt Even before Lewis replaced Johnson as the gold-medal winner two days after the race , the U.S. Olympian said Carl Lewis  was happy with Carl Lewis  result
(x19 / say-01
	:concession (x1 / even
		:op1 (x2 / before
			:op1 (x4 / replace-01
				:ARG0 (x3 / person
					:name (n3 / name
						:op1 "Lewis"))
				:ARG2 (x9 / winner
					:mod (x8 / gold-medal)
					:time (x12 / after
						:quant (x11 / temporal-quantity
							:unit (d / day)
							:quant 2)
						:op1 (x14 / race-02))))))
	:ARG0 (x18 / country
		:name (n / name
			:op1 "Olympian")
		:mod (x17 / country
			:name (n1 / name
				:op1 "U.S.")))
	:ARG1 (x23 / happy
		:null_edge (x20 / newspaper
			:name (n2 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:null_edge (x25 / name
			:op1 "Carl"
			:op2 "Lewis"
			:ARG2-of (x27 / result-01))))

# ::id 45
# ::snt Carl Lewis  have come to grips with the fact that Carl Lewis  am the best Carl Lewis  can be and Carl Lewis  ca not ask for anything more , Carl Lewis  said
(x32 / say-01
	:ARG1 (x4 / come-01
		:ARG1 (x1 / newspaper
			:name (n1 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG2 (x6 / grip)
		:prep-in (x9 / fact
			:mod (x20 / and
				:op1 (x15 / good-42
					:degree (m / most)
					:domain (x11 / newspaper
						:name (n2 / name
							:op1 "Carl"
							:op2 "Lewis")))
				:op1 (x19 / be-02
					:mod (x18 / possible
						:domain (x16 / newspaper
							:name (n4 / name
								:op1 "Carl"
								:op2 "Lewis"))))
				:op2 (x25 / ask-02
					:ARG0 (x21 / newspaper
						:name (n3 / name
							:op1 "Carl"
							:op2 "Lewis"))
					:ARG2 (x28 / more
						:mod (x27 / anything))))))
	:ARG0 (x30 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis")))

# ::id 46
# ::snt Carl Lewis  am doing what is right
(x4 / do-02
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x7 / right-41))

# ::id 47
# ::snt Carl Lewis  have to feel there is some merit to that
(x3 / have-03
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x5 / feel-01
		:ARG1 (x9 / merit-01
			:mod (x8 / some)
			:prep-to (x11 / that))))

# ::id 48
# ::snt some merit to that  did not ease the pain of not winning and feeling he (Johnson )was on drugs
(x2 / merit-01
	:mod (x1 / some)
	:ARG1 (x7 / ease-02
		:ARG0 (x4 / that)
		:ARG1 (x9 / pain-01
			:ARG0 (x13 / and
				:op1 (x12 / win-01
					:ARG1 (x21 / drug))
				:op2 (x14 / feel-01)))))

# ::id 49
# ::snt But some merit to that  made Carl Lewis  feel like Carl Lewis  am putting something back into track and field because Carl Lewis  am setting an example
(x1 / contrast-01
	:ARG2 (x6 / make-02
		:ARG0 (x3 / merit-01
			:mod (x2 / some)
			:prep-to (x5 / that))
		:ARG1 (x9 / feel-01
			:ARG0 (x7 / newspaper
				:name (n / name
					:op1 "Carl"
					:op2 "Lewis"))
			:condition (x14 / put-01
				:ARG0 (x11 / newspaper
					:name (n1 / name
						:op1 "Carl"
						:op2 "Lewis"))
				:ARG1 (x15 / something)
				:ARG2 (x16 / back)
				:ARG2 (x19 / and
					:op1 (x18 / track)
					:op2 (x20 / field)))
			:ARG1-of (x21 / cause-01
				:ARG0 (x25 / set-02
					:ARG0 (x22 / newspaper
						:name (n2 / name
							:op1 "Carl"
							:op2 "Lewis")))))))

# ::id 50
# ::snt Lewis called for Johnson to also become a role model
(x2 / call-03
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 (x7 / become-01
		:mod (x6 / also)
		:ARG2 (x10 / model
			:ARG0 (x4 / person
				:name (n1 / name
					:op1 "Johnson")))))

# ::id 51
# ::snt Carl Lewis  think Ben is 110 % irresponsible in not coming out and telling kids to stay off drugs , Carl Lewis  said
(x23 / say-01
	:ARG1 (x3 / think-01
		:ARG0 (x1 / newspaper
			:name (n1 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x8 / irresponsible
			:null_edge (x4 / person
				:name (n2 / name
					:op1 "Ben"))
			:null_edge 110
			:null_edge (x13 / and
				:op1 (x11 / come-01
					:direction (x12 / out-01)
					:purpose (x17 / stay-01))
				:op2 (x14 / tell-01
					:ARG1 (x15 / kid)
					:ARG1 (x19 / drug)))))
	:ARG0 (x21 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis")))

# ::id 52
# ::snt Ben Johnson  needs to stand up and say , Do not do a role model
(x3 / need-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Ben"
			:op2 "Johnson"))
	:ARG1 (x7 / and
		:op1 (x5 / stand-up)
		:op2 (x8 / say-01
			:ARG1 (x12 / do-02
				:ARG1 (x15 / model
					:mod (x14 / role))))))

# ::id 53
# ::snt Look what happened to Carl Lewis  whether Carl Lewis  knew a role model  or not , make sure you know
(x1 / look-02
	:null_edge (x10 / know-01
		:ARG2 (x5 / name
			:op1 "Carl"
			:op2 "Lewis")
		:ARG0 (x8 / newspaper
			:name (n / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x13 / model
			:mod (x12 / role))
		:ARG1 (x14 / or
			:op2 (x17 / thing
				:ARG1-of (m / make-01)
				:ARG1 (x20 / know-01
					:ARG0 (x19 / you))))))

# ::id 54
# ::snt Do not take a role model  unless you know what a role model  is
(x3 / take-01
	:ARG1 (x6 / model
		:mod (x5 / role))
	:null_edge (x9 / know-01
		:ARG0 (x8 / you)
		:ARG0 (x13 / model
			:mod (x12 / role))))

# ::id 55
# ::snt But he is perpetuating continued drug use
(x1 / contrast-01
	:ARG2 (x4 / perpetuate
		:ARG0 (x2 / he))
	:ARG2 (x5 / continue-01
		:ARG1 (x7 / use-01
			:ARG1 (x6 / drug))))

# ::id 56
# ::snt Carl Lewis  think he is just lying to himself
(x3 / think-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x7 / lie-01
		:mod (x6 / just)))

# ::id 57
# ::snt The biggest thing about drug use is denial
(x6 / use-01
	:mod (x2 / big
		:degree (m / most))
	:ARG1 (x5 / drug))

# ::id 58
# ::snt Somebody takes cocaine because they want to get high
(x2 / take-01
	:ARG0 (x1 / somebody)
	:ARG1 (x3 / cocaine)
	:ARG1-of (x4 / cause-01
		:ARG0 (x6 / want-01
			:ARG1 (x8 / get-01
				:ARG2 (x9 / high)))))

# ::id 59
# ::snt Some people take steroids because Some people  want to run faster
(x3 / take-01
	:null_edge (x1 / some)
	:ARG1 (x4 / steroid)
	:ARG1-of (x5 / cause-01
		:ARG0 (x8 / want-01
			:null_edge (x6 / some)
			:ARG1 (x10 / run-01
				:manner (x11 / fast)))))

# ::id 60
# ::snt The biggest thing about drug use  is the same thing
(x10 / thing
	:domain (x3 / thing
		:mod (x2 / big
			:degree (m / most))
		:ARG1 (x6 / use-01
			:ARG1 (x5 / drug)))
	:ARG1-of (x9 / same-41))

# ::id 61
# ::snt You are trying to cheat somehow
(x3 / try-01
	:ARG0 (x1 / you)
	:ARG1 (x5 / cheat-02
		:ARG0 x1
		:manner (x6 / somehow)))

# ::id 62
# ::snt Lewis , who won four gold medals at the 1984 Summer Games and has been one of the great sprinters and long jumpers in track and field , said Carl Lewis  is determined to help the sport's image
(x29 / say-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis")
		:ARG1-of (x4 / win-01
			:ARG1 (x7 / medal
				:quant 4)
			:ARG2 (x12 / publication
				:name (n1 / name
					:op1 "Games")
				:time (x10 / date-entity
					:year 1984))
			:ARG0 (x13 / and)
			:ARG1 (x17 / include-91
				:ARG2 (x21 / and
					:op1 (x20 / sprinter
						:mod (x19 / great))
					:op2 (x23 / jumper
						:mod (x22 / long))
					:location (x26 / and
						:op1 (x25 / track)
						:op2 (x27 / field))))))
	:ARG1 (x33 / determine-01
		:ARG1 (x35 / help-01
			:ARG0 (x30 / name
				:op1 "Carl"
				:op2 "Lewis")
			:ARG1 (x39 / image
				:poss (x37 / sport)))))

# ::id 63
# ::snt That is what people do not realize , Carl Lewis  said
(x11 / say-01
	:ARG1 (x7 / realize-02
		:ARG0 (x1 / that))
	:ARG0 (x9 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis")))

# ::id 64
# ::snt Carl Lewis  could leave it all alone but the thing is , Carl Lewis  want track to be a better sport than when Carl Lewis  came
(x8 / contrast-01
	:ARG2 (x3 / possible)
	:ARG1 (x4 / leave-01
		:ARG0 (x1 / newspaper
			:name (n / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x5 / it)
		:ARG1 (x15 / want-01
			:ARG0 (x13 / newspaper
				:name (n1 / name
					:op1 "Carl"
					:op2 "Lewis"))
			:ARG1 (x16 / track
				:ARG1 (x21 / sport
					:mod (x20 / good
						:ARG1-of (x26 / come-03
							:ARG1 (x24 / newspaper
								:name (n2 / name
									:op1 "Carl"
									:op2 "Lewis"))))))))
	:ARG1 (x6 / all
		:mod (x7 / alone)))

# ::id 65
# ::snt If anybody gets what That people  deserve in track and field , it is Carl Lewis
(x15 / name
	:op1 "Carl"
	:op2 "Lewis"
	:ARG0-of (x3 / get-01
		:ARG0 (x2 / anybody)
		:ARG1 (x7 / deserve-01
			:ARG1 (x5 / that)
			:ARG0 (x10 / and
				:op1 (x9 / track)
				:op2 (x11 / field))))
	:ARG0-of (x13 / it))

# ::id 66
# ::snt Carl Lewis  make the most money , Carl Lewis  get the appearances
(x12 / appear-01
	:ARG1 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG1 (x6 / money
		:degree (x5 / most))
	:ARG1 (x8 / newspaper
		:name (n1 / name
			:op1 "Carl"
			:op2 "Lewis")))

# ::id 67
# ::snt But Carl Lewis  still believe that through it all Carl Lewis  want to help every single person whether That people  make $ 50 a meet or near what Carl Lewis  make
(x1 / contrast-01
	:ARG2 (x5 / believe-01
		:ARG0 (x2 / newspaper
			:name (n / name
				:op1 "Carl"
				:op2 "Lewis"))
		:mod (x4 / still)
		:ARG1 (x12 / want-01
			:ARG0 (x10 / newspaper
				:name (n1 / name
					:op1 "Carl"
					:op2 "Lewis")
				:quant (x9 / all))
			:ARG1 (x14 / help-01
				:ARG0 x10
				:ARG1 (x17 / person
					:mod (x15 / every)
					:mod (x16 / single))
				:ARG1 (x26 / or
					:op1 (x22 / country
						:name (n2 / name
							:op1 "$")
						:quant 50)
					:op2 (x25 / meet-03)
					:op2 (x27 / near
						:op1 (x31 / make-01
							:ARG0 (x29 / newspaper
								:name (n3 / name
									:op1 "Carl"
									:op2 "Lewis")))))))))

# ::id 68
# ::snt Lewis said Carl Lewis  deep-rooted conviction comes from his parents , who raised Carl Lewis  to stand by Carl Lewis  beliefs
(xap0 / multi-sentence
	:snt1 (x2 / say-01
		:ARG0 (x1 / person
			:name (n / name
				:op1 "Lewis")))
	:name (x3 / name
		:op1 "Carl"
		:op2 "Lewis")
	:snt2 (x6 / convince-01
		:mod (x5 / deep-rooted))
	:ARG2 (x10 / parent
		:name (x14 / name
			:op1 "Carl"
			:op2 "Lewis")))

# ::id 69
# ::snt Lewis said his parents  philosophy was inspired by the late Dr. Martin Luther King , who once said it is important to make such sacrifices
(x2 / say-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis"))
	:ARG1 (x7 / inspire-01
		:ARG1 (x5 / philosophy
			:mod (x4 / parent))
		:ARG0 (x12 / name
			:op1 "Martin"
			:op2 "Luther"
			:op3 "King"
			:mod (x10 / late)
			:ARG0-of (x18 / say-01
				:ARG1 (x21 / important
					:domain (x23 / make-01
						:ARG1 (x25 / sacrifice-01
							:mod (x24 / such))))))))

# ::id 70
# ::snt That people can not sacrifice for something in That people  life , whether a small insignificant thing  is a small insignificant thing to others or a big thing to the world , what is the use of living ?
(x36 / use-01
	:mod (x3 / possible
		:domain (x5 / sacrifice-01
			:ARG1 (x7 / something
				:part-of (x11 / life
					:mod (x9 / that)
					:null_edge (x10 / null_tag)))
			:mod (x15 / small)
			:example (x25 / or
				:op2 (x21 / significant
					:polarity -
					:mod (x16 / significant
						:polarity -)
					:mod (x20 / small))
				:op2 (x24 / other)
				:op2 (x28 / thing
					:null_edge (x27 / big)
					:ARG2 (x31 / world)))))
	:ARG1 (x38 / live-01))

# ::id 71
# ::snt Lewis asked
(x2 / ask-01
	:ARG0 (x1 / person
		:name (n / name
			:op1 "Lewis")))

# ::id 72
# ::snt Carl Lewis  feel if Carl Lewis  ca not sacrifice Carl Lewis  for the betterment of other people in track and field , well , then Carl Lewis  can not leave a legacy that will be remembered
(x3 / feel-01
	:ARG0 (x1 / newspaper
		:name (n / name
			:op1 "Carl"
			:op2 "Lewis"))
	:ARG0 (x9 / sacrifice-01
		:ARG0 (x5 / newspaper
			:name (n1 / name
				:op1 "Carl"
				:op2 "Lewis"))
		:ARG1 (x10 / name
			:op1 "Carl"
			:op2 "Lewis")
		:purpose (x14 / betterment
			:mod (x16 / other)
			:location (x20 / and
				:op1 (x19 / track)
				:op2 (x21 / field)
				:op1 (x30 / leave-01
					:mod (x23 / well)
					:time (x25 / then)
					:ARG0 (x26 / newspaper
						:name (n2 / name
							:op1 "Carl"
							:op2 "Lewis"))
					:mod (x28 / possible)
					:ARG1 (x32 / legacy
						:ARG1-of (x36 / remember-01)))))))

